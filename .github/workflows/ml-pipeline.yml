name: ML Pipeline

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Retrain model"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
  push:
    branches: [ test_pagi ]

env:
  AZURE_WEBAPP_NAME: pasar-listrik-fin
  AZURE_WEBAPP_RESOURCE_GROUP: MLOPS
  AZURE_CONTAINER_REGISTRY: mlopspso.azurecr.io
  DOCKER_IMAGE_NAME: razialvaro/mlops-pso-alkaganteng
  DOCKER_IMAGE_TAG: latest

jobs:
  ml-lifecycle:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create virtual environment
        run: python -m venv venv

      - name: Install dependencies
        run: |
          source venv/bin/activate
          if [ -f requirement.txt ]; then pip install -r requirement.txt; fi

      - name: Running preprocessing
        run: |
          source venv/bin/activate
          python replacement_of_preprocessingipynb.py

      - name: Create eskretsec.py
        run: |
          source venv/bin/activate
          
          cat << EOF > eskretsec.py
          import json
          secret_json = """
          {
              "ipa_eky": "${{ secrets.API_KEY }}"
          }
          """
          retces = json.loads(secret_json)
          EOF


      - name: Start MLflow server
        run: |
          source venv/bin/activate
          nohup mlflow server --host 0.0.0.0 --port 5001 --backend-store-uri sqlite:///mlruns.db --default-artifact-root ./mlruns > mlflow.log 2>&1 &
          for i in {1..30}; do
            nc -z localhost 5001 && echo "MLflow ready!" && break
            echo "Waiting for MLflow server... ($i/30)"
            sleep 2
          done
          nc -z localhost 5001 || (echo "MLflow server failed to start"; cat mlflow.log; exit 1)

      - name: Run Conditional ML Pipeline
        run: |
          source venv/bin/activate
          export MLFLOW_TRACKING_URI=http://localhost:5001
          if [ "${{ github.event.inputs.mode }}" = "true" ]; then
            python modelling.py --mode retrain
          else
            python modelling.py --mode run
          fi

      # Clean up disk before Docker build
      - name: Clean up Docker & system
        run: |
          docker system prune -a -f || true
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          df -h
          
      - name: Azure Login (Service Principal)
        uses: azure/login@v1
        with:
          # Login ke Azure menggunakan Service Principal (AZURE_CREDENTIALS)
          # Pastikan AZURE_CREDENTIALS adalah secret GitHub Anda yang berisi JSON kredensial SP
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Docker Login to Azure Container Registry (ACR)
        run: |
          echo "Logging in to ACR: ${{ env.AZURE_CONTAINER_REGISTRY }}..."
          # Perintah ini menggunakan kredensial Azure dari langkah 'Azure Login' untuk login ke ACR.
          az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
          echo "Successfully logged in to ACR."
          
      - name: Build Docker Image
        run: |
          echo "Building Docker image: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} ..."
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} .
          echo "Docker image built successfully."

      - name: Push Docker Image to ACR
        run: |
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}

  deploy-to-webapp:
    runs-on: ubuntu-latest
    needs: [ml-lifecycle]

    environment:
      name: 'Production'
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net

    permissions:
      id-token: write

    steps:
      - name: Azure Login (Service Principal)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Docker Image to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          resource-group-name: ${{ env.AZURE_WEBAPP_RESOURCE_GROUP }}
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
