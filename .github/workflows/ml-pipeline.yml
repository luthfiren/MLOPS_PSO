name: ML Pipeline

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Retrain model"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
  push:
    branches: [ test_pagi ] # Keep your desired branch
env:
  # Variabel lingkungan global yang digunakan di seluruh workflow
  AZURE_WEBAPP_NAME: pasar-listrik-fin # <--- GANTI INI dengan nama App Service Anda di Azure
  AZURE_WEBAPP_RESOURCE_GROUP: MLOPS           # <--- GANTI INI dengan nama Resource Group App Service Anda
  AZURE_CONTAINER_REGISTRY: mlopspso.azurecr.io # <--- GANTI INI dengan nama Azure Container Registry Anda
  DOCKER_IMAGE_NAME: razialvaro/mlops-pso-alkaganteng # Nama image di ACR (biasanya sama dengan nama repo)
  DOCKER_IMAGE_TAG: latest # Menggunakan SHA commit sebagai tag unik untuk image Docker
  # Anda juga bisa menambahkan tag 'latest' secara kondisional di langkah push Docker.

jobs:
  ml-lifecycle:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" >> .env
          echo "DB_HOST=localhost" >> .env
          echo "ANOTHER_VAR=example" >> .env

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create virtual environment
        run: python -m venv venv

      - name: Install dependencies
        run: |
          source venv/bin/activate
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Running preprocessing
        run: |
          source venv/bin/activate
          python replacement_of_preprocessingipynb.py

      - name: Start MLflow server
        run: |
          source venv/bin/activate
          nohup mlflow server --host 0.0.0.0 --port 5001 --backend-store-uri sqlite:///mlruns.db --default-artifact-root ./mlruns > mlflow.log 2>&1 &
          for i in {1..30}; do
            nc -z localhost 5001 && echo "MLflow ready!" && break
            echo "Waiting for MLflow server... ($i/30)"
            sleep 2
          done
          nc -z localhost 5001 || (echo "MLflow server failed to start"; cat mlflow.log; exit 1)

      - name: Run Conditional ML Pipeline
        run: |
          source venv/bin/activate
          export MLFLOW_TRACKING_URI=http://localhost:5001
          if [ "${{ github.event.inputs.mode }}" = "true" ]; then
            python modelling.py --mode retrain
          else
            python modelling.py --mode run
          fi

      # The step to download the model from MLflow Registry is commented out
      # as per your request for CSV deployment, but you would likely need it
      # if your Docker image needs to serve the model directly.
      # - name: Download Model from MLflow Registry (latest only)
      #   run: |
      #     source venv/bin/activate
      #     mkdir -p ./publish/artifacts/models/
      #     MODEL_NAME="ElectricityForecaster"
      #     MODEL_PATH="./publish/artifacts/models/deployed_model"
      #     python -c "
      #     import mlflow
      #     try:
      #       mlflow.pyfunc.save_model(path='$MODEL_PATH', mlflow_model_uri=f'models:/$MODEL_NAME/latest')
      #       print('Latest model downloaded successfully.')
      #     except Exception as e:
      #       print(f'Failed to download latest model: {e}')
      #       exit(1)
      #     "

      # --- Docker Build and Push Steps ---
      - name: Azure Login (Service Principal)
        uses: azure/login@v1
        with:
          # Login ke Azure menggunakan Service Principal (AZURE_CREDENTIALS)
          # Pastikan AZURE_CREDENTIALS adalah secret GitHub Anda yang berisi JSON kredensial SP
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker Login to Azure Container Registry (ACR)
        run: |
          echo "Logging in to ACR: ${{ env.AZURE_CONTAINER_REGISTRY }}..."
          # Perintah ini menggunakan kredensial Azure dari langkah 'Azure Login' untuk login ke ACR.
          az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
          echo "Successfully logged in to ACR."

      - name: Build Docker Image
        run: |
          echo "Building Docker image: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} ..."
          # Membangun Docker image dari Dockerfile di root repositori ('.').
          # Tag image dengan nama ACR, nama image, dan SHA commit.
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} .
          echo "Docker image built successfully."

      - name: Push Docker Image to ACR
        run: |
          echo "Pushing Docker image to ACR..."
          # Mendorong image yang sudah di-tag ke ACR.
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          echo "Docker image pushed to ACR successfully."

      # --- OPSIONAL: Mendorong tag 'latest' secara kondisional ---
      - name: Push 'latest' tag to ACR (Conditional)
        if: github.ref == 'refs/heads/webadded' # Hanya dorong 'latest' jika ini dari branch 'webadded'
        run: |
          echo "Tagging and pushing 'latest' image for branch 'webadded'..."
          # Tag image yang baru saja dibuat dengan 'latest'
          docker tag ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }} ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          # Dorong image dengan tag 'latest' ke ACR
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          echo "'latest' tag pushed to ACR."

  deploy-to-webapp:
    runs-on: ubuntu-latest
    needs: [ml-lifecycle] # Job ini akan berjalan hanya jika 'build-and-push-docker' berhasil

    environment:
      name: 'Production' # Mendefinisikan lingkungan deployment (berguna untuk proteksi, URL, dll.)
      url: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net # URL yang diharapkan dari App Service Anda

    permissions:
      id-token: write # Diperlukan jika menggunakan OIDC untuk autentikasi ke Azure

    steps:
      - name: Azure Login (Service Principal)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # Login ulang ke Azure menggunakan SP yang sama

      - name: Deploy Docker Image to Azure Web App
        uses: azure/webapps-deploy@v2 # Action untuk deployment ke Azure App Services
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }} # Nama Azure Web App Anda
          resource-group: ${{ env.AZURE_WEBAPP_RESOURCE_GROUP }} # Resource Group Azure Web App Anda
          # Tentukan image Docker yang akan digunakan oleh App Service.
          # Format: <ACR_URL>/<IMAGE_NAME>:<TAG>
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
          # startup-command: 'gunicorn --bind 0.0.0.0 --timeout 600 app:app' # Opsional: Jika Anda perlu menentukan perintah startup kustom untuk aplikasi Anda di dalam kontainer
          # If you used the 'latest' tag for convenience:
          # images: '${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}:latest'
