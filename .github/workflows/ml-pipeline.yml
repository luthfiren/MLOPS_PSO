name: ML Pipeline

on:
  workflow_dispatch:  
  push:
    branches: [ webadded ] 
env:
  AZURE_WEBAPP_NAME: electricity-market-forecasting

jobs:
  ml-lifecycle:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
           python-version: '3.11'
           
      - name: Install dependencies
        run: |
          pip install -r requirement.txt
          pip install jupyter

      - name: Data Ingestion Fingrid & FMI
        run: |
          python importingDataFinGrid.py
          python importingDataFMI.py

      - name: Data Preprocessing
        run: |
          jupyter nbconvert --to notebook --execute preprocessing.ipynb
          
      - name: Train and Evaluate ML Model
        run: |
          python modelling.py # This assumes modelling.py will execute your training and evaluation logic
          # If your modelling.py requires specific arguments or functions to be called,
          # you might need to adjust this line. For example:
          # python -c "from modelling import train_sarima_model; train_sarima_model()"
          # Or if it has a main function:
          # python -c "from modelling import main; main()"
          
      - name: Prepare Deployment Package
        run: |
          # Buat direktori 'publish' jika belum ada untuk mengumpulkan semua file yang diperlukan
          mkdir -p ./publish/data/forecasts/
          mkdir -p ./publish/artifacts/metrics/
          mkdir -p ./publish/artifacts/models/ # Untuk model yang sudah dilatih
          mkdir -p ./publish/templates/ # Untuk template HTML (misal: untuk Flask/Django)
          mkdir -p ./publish/static/ # Untuk file statis (CSS, JS, gambar)

          # Salin semua file aplikasi dan model yang diperlukan ke direktori 'publish'
          # Sesuaikan daftar file/folder ini dengan struktur proyek Python Anda
          cp app.py ./publish/
          cp requirement.txt ./publish/ # Menggunakan requirement.txt sesuai file Anda
          cp -r templates/ ./publish/
          cp -r static/ ./publish/
          # Salin model yang sudah dilatih (asumsi 'trained_model.pkl' dibuat oleh 'modelling.py')
          cp -r model/ ./publish/

          # Kompres seluruh isi direktori 'publish' menjadi satu file .zip
          # Masuk ke direktori 'publish' terlebih dahulu agar isi zip berada langsung di root-nya.
          cd publish
          zip -r ../release.zip .
          cd .. # Kembali ke direktori root repository

      - name: Upload Application Artifact
        uses: actions/upload-artifact@v4
        with:
          # Nama artifact yang akan diunduh oleh job 'deploy'
          name: python-app
          # Path ke file .zip yang baru saja dibuat
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    # Job 'deploy' bergantung pada keberhasilan job 'ml-lifecycle'
    needs: [ml-lifecycle]
    environment:
      # Mendefinisikan environment untuk deployment, berguna untuk proteksi dan URL preview
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      # Diperlukan untuk meminta JWT (JSON Web Token) jika menggunakan OIDC untuk autentikasi.
      id-token: write
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          # Mengunduh artifact 'python-app' yang diunggah oleh job 'ml-lifecycle'
          name: python-app
          # File akan diunduh ke direktori kerja saat ini (yaitu './release.zip')

      - name: Verify downloaded artifact
        run: ls # Untuk memverifikasi bahwa 'release.zip' ada setelah diunduh

      # Langkah unzip ini mungkin tidak selalu diperlukan karena 'azure/webapps-deploy'
      # action biasanya dapat langsung menerima file .zip sebagai input 'package'.
      # Namun, kami menyertakannya sesuai dengan contoh yang Anda berikan.
      # Jika 'package' diharapkan menunjuk ke folder yang tidak di-zip,
      # maka 'unzip' diperlukan dan 'package' harus diubah ke path folder yang tidak di-zip.
      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2 # Gunakan v2 untuk publish-profile, atau v3 juga mendukung
        id: deploy-to-webapp
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'Production'
          package: './release.zip'
          # TAMBAHKAN BARIS INI UNTUK MENGGUNAKAN PUBLISH PROFILE
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
